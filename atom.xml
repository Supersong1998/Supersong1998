<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.sssdoctor.com</id>
    <title>大大大大宋</title>
    <updated>2022-03-09T13:07:26.087Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.sssdoctor.com"/>
    <link rel="self" href="https://www.sssdoctor.com/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://www.sssdoctor.com/images/avatar.png</logo>
    <icon>https://www.sssdoctor.com/favicon.ico</icon>
    <rights>All rights reserved 2022, 大大大大宋</rights>
    <entry>
        <title type="html"><![CDATA[机器学习数据预处理02]]></title>
        <id>https://www.sssdoctor.com/post/ji-qi-xue-xi-shu-ju-yu-chu-li-02/</id>
        <link href="https://www.sssdoctor.com/post/ji-qi-xue-xi-shu-ju-yu-chu-li-02/">
        </link>
        <updated>2022-03-09T04:21:59.000Z</updated>
        <summary type="html"><![CDATA[<p>手动范围缩放、归一化、独热编码、标签编码</p>
]]></summary>
        <content type="html"><![CDATA[<p>手动范围缩放、归一化、独热编码、标签编码</p>
<!-- more -->
<p>1.手动范围缩放<br>
主要利用一个for循环 （for in遍历转置矩阵，确定最小最大值，根据最大最小值，利用np.linagl.solve(a,b)求解未知数，也就是k,b、然后将求的结果添加到某一空矩阵，继续循环。<br>
<img src="https://www.sssdoctor.com/post-images/1646829755177.png" alt="" loading="lazy"><br>
2.归一化（比例占比100%+1）sp.normalize   norm范数<br>
情景：特征值具体的值不重要、但是每个样本特征值的占比更加重要。示例：不同人对于某一类型的电影与个人观看总体类型的观看比例，可推测偏好相似程度。个人认为数据预处理的方式，跟数据要处理的问题具体相关。<br>
<img src="https://www.sssdoctor.com/post-images/1646829768358.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829774788.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829780437.png" alt="" loading="lazy"><br>
3.二值化<br>
有些业务并不需要分析矩阵，完整的数据。比如图像边缘识别只需要检测边缘即可可以根据事先给定的阈值，用0与1表示高不高于阈值。二值化的数组中的每个元素非0即1，需要设置一个阈值器，相当于过滤器，将这一过滤器应用于某一数据组。sp.binarizer(threshold=阈值)然后fit_transform<br>
<img src="https://www.sssdoctor.com/post-images/1646829793035.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829803227.png" alt="" loading="lazy"><br>
4.独热编码<br>
特征变多，数值的复杂度降低（例如文字）sp.onehotencoder 然后fit_transform<br>
<img src="https://www.sssdoctor.com/post-images/1646829818099.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829823098.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829827781.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829831957.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829836265.png" alt="" loading="lazy"><br>
5.标签编码<br>
对于某些字符串，利用自带的编码器可以简单编码，但是以后对于自己研究的东西，需要自己写编码的程序<br>
sp.labelencoder()然后fit_transform<br>
<img src="https://www.sssdoctor.com/post-images/1646829856722.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646829862530.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iCEM 网格划分 练习1]]></title>
        <id>https://www.sssdoctor.com/post/icem-wang-ge-hua-fen-lian-xi-1/</id>
        <link href="https://www.sssdoctor.com/post/icem-wang-ge-hua-fen-lian-xi-1/">
        </link>
        <updated>2022-03-09T01:25:46.000Z</updated>
        <summary type="html"><![CDATA[<p>流场几何形状为45度弯头，内部有一竖直空心管道通过。空心管道与流场接触的壁面对于流体产生阻碍作用。划分的基本操作：1.生成3d块，利用切割功能实现块整体结构与几何的相似。2.关联：快网格能够映射到几何上。3.空心管道进行o型切分，同时删除多余的块。4.进行空心块的关联，包括：边关联以及面关联。5.进行整体结构O型切分。6.划分网格并开始调整。</p>
]]></summary>
        <content type="html"><![CDATA[<p>流场几何形状为45度弯头，内部有一竖直空心管道通过。空心管道与流场接触的壁面对于流体产生阻碍作用。划分的基本操作：1.生成3d块，利用切割功能实现块整体结构与几何的相似。2.关联：快网格能够映射到几何上。3.空心管道进行o型切分，同时删除多余的块。4.进行空心块的关联，包括：边关联以及面关联。5.进行整体结构O型切分。6.划分网格并开始调整。</p>
<!-- more -->
<p><img src="https://www.sssdoctor.com/post-images/1646789517196.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646789525342.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646789530500.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646789534144.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646789538438.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646789553961.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python—01—学习路径及数据类型]]></title>
        <id>https://www.sssdoctor.com/post/1/</id>
        <link href="https://www.sssdoctor.com/post/1/">
        </link>
        <updated>2022-03-07T06:23:05.000Z</updated>
        <summary type="html"><![CDATA[<p>1.计算机三大件之间的相互关系<br>
cpu负责计算、 内存暂时存储、 硬盘存储，内存相当于中间商，加快cpu需要的数据的输送，硬盘输送数据太慢。<br>
2.变量与内存之间的关系<br>
内存：仓库<br>
变量：仓库内的容器 既然是容器就得有名字、地址、以及空间</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.计算机三大件之间的相互关系<br>
cpu负责计算、 内存暂时存储、 硬盘存储，内存相当于中间商，加快cpu需要的数据的输送，硬盘输送数据太慢。<br>
2.变量与内存之间的关系<br>
内存：仓库<br>
变量：仓库内的容器 既然是容器就得有名字、地址、以及空间</p>
<!-- more -->
<p>3.常量<br>
python里面没有常量、约定俗成是全部大写，但是依然可以修改<br>
<img src="https://www.sssdoctor.com/post-images/1646639742651.png" alt="" loading="lazy"><br>
4.数据类型<br>
4.1引言：<br>
为了计算机方便处理不同的类型<br>
举例:10、中国、#人可以区别 计算机如何区分？<br>
4.2常见类型：<br>
数字类型：int /long/float/<br>
字符串：str存储文字<br>
列表：list<br>
布尔：bool逻辑判断<br>
集合set两组数据之间的关系<br>
字典：dict<br>
字节bytes<br>
4.2.1数字<br>
<img src="https://www.sssdoctor.com/post-images/1646634927872.png" alt="" loading="lazy"></p>
<p>代码：type(变量名)#查看变量类型<br>
python 2.2以后自动将long 转换为Int<br>
4.2.2字符串<br>
只要是引号就可以，但必须保证一致性，三引号表示多行字符串<br>
<img src="https://www.sssdoctor.com/post-images/1646636358317.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646635523316.png" alt="" loading="lazy"><br>
特性一：不可修改<br>
如下图所示，虽然name的显示内容发生改变 但是id地址也发生了改变，原先的id依然存在<br>
<img src="https://www.sssdoctor.com/post-images/1646635631392.png" alt="" loading="lazy"><br>
特性二：有索引，可切片（具有编号）<br>
但是切片是顾头不顾尾，首位为0<br>
<img src="https://www.sssdoctor.com/post-images/1646636119050.png" alt="" loading="lazy"><br>
字符串的格式修改、拼接等操作仍需要扩展！<br>
字符串引用外部变量%s %占位符<br>
注意%d 后面要求是数字<br>
%f后面要求后面是小数<br>
示例：<br>
#方法一</p>
<h2 id="msg-s-info-namesageshobbys">msg='''-------------%s info---------<br>
name:%s<br>
age:%s<br>
hobby:%s</h2>
<p>'''%(name,name,age,hobby)<br>
print(msg)</p>
<h2 id="方法二mdgf-name-info-namenameageagehobbyhobby">#方法二<br>
mdg=f'''-------------{name} info---------<br>
name:{name}<br>
age:{age}<br>
hobby:{hobby}</h2>
<h2 id="printmdg输出-wentao-info-namewentaoage27hobbyswim">'''<br>
print(mdg)<br>
输出：<br>
-------------wentao info---------<br>
name:wentao<br>
age:27<br>
hobby:swim</h2>
<h2 id="-wentao-info-namewentaoage27hobbyswim">-------------wentao info---------<br>
name:wentao<br>
age:27<br>
hobby:swim</h2>
<p>4.2.3bool运算<br>
<img src="https://www.sssdoctor.com/post-images/1646638011085.png" alt="" loading="lazy"><br>
true or false<br>
代码示例：<br>
goal=500<br>
a=600<br>
if goal&gt;=a:<br>
print(&quot;niubi&quot;)<br>
else:<br>
print(&quot;laji&quot;)<br>
输出结果<br>
laji<br>
4.2.4list<br>
可支持多个同等类型字符串并列，以及修改<br>
示例代码：<br>
girl_names=[&quot;xiaobian&quot;,&quot;xiaoyun&quot;,&quot;xiaohei&quot;]</p>
<p>girl_names[1]<br>
print(girl_names[1])<br>
girl_names[0]='hhhh'<br>
print(girl_names)</p>
<p>列表的操作：增、删、改、查<br>
<img src="https://www.sssdoctor.com/post-images/1646639542840.png" alt="" loading="lazy"><br>
示例：<br>
<img src="https://www.sssdoctor.com/post-images/1646641423818.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[机器学习概述]]></title>
        <id>https://www.sssdoctor.com/post/ji-qi-xue-xi/</id>
        <link href="https://www.sssdoctor.com/post/ji-qi-xue-xi/">
        </link>
        <updated>2022-03-01T10:40:17.000Z</updated>
        <summary type="html"><![CDATA[<p>有关机器学习的背景、应用、基本问题以及数据预处理中的均值移除、范围缩放</p>
]]></summary>
        <content type="html"><![CDATA[<p>有关机器学习的背景、应用、基本问题以及数据预处理中的均值移除、范围缩放</p>
<!-- more -->
<p>一、<br>
人工智能<br>
机器学习<br>
深度学习</p>
<p>人工智能领域：computer vision/natural language processing/recommender system) cv/nlp/rc</p>
<p>基础：高等数学（求偏导）、线性代数（会矩阵运算）、概率论与数理统计（随机变量）</p>
<p>二、机器学习的一般过程<br>
<img src="https://www.sssdoctor.com/post-images/1646632942621.jpg" alt="" loading="lazy"><br>
2.1数据处理<br>
2.2机器学习<br>
2.3业务运维</p>
<p>三、应用<br>
股价预测、推荐引擎、人脸识别、语音识别、自然语言识别、图像识别</p>
<p>四、基本问题<br>
4.1回归问题<br>
根据已知的输入输出寻得某一模型，将未知输入带入模型，得到连续的输出<br>
4.2分类问题<br>
根据已知的输入输出寻得某一模型，将未知输入带入模型，得到离散的输出<br>
4.3聚类问题<br>
根据输入的相似程度，将其划分为不同的群落<br>
4.4降维问题<br>
在尽量不影响性能的情况下，降低数据的复杂程度</p>
<p>五、数据预处理<br>
1.输入数据-模型-输出数据<br>
2.一行一样本、一列一特征<br>
3.均值移除（标准化）、范围缩放、归一化、二值化、独热编码、标签编码、<br>
3.1均值移除（标准化）<br>
3.1.1均值为0 标准差为1 可以避免不同特征值的差异对于最后模型性能的影响<br>
此处应该有图<br>
3.1.2标准差能反映数据的离散程度。<br>
import numpy as np #引入numpy库<br>
import sklearn.preprocessing as sp#引入sp库<br>
raw_samples#变量名#=np.array#数组#([<br>
[17,90,4000],<br>
[20,80,5000],<br>
[23,75,5500]])<br>
result=sp.scale(raw_samples)#scale比例模型<br>
print(result)<br>
print(result.mean(axis=0))#mean平均的<br>
print(result.std(axis=0)<br>
)<br>
输出结果为：<br>
[[-1.22474487  1.33630621 -1.33630621]<br>
[ 0.         -0.26726124  0.26726124]<br>
[ 1.22474487 -1.06904497  1.06904497]]<br>
[ 0.00000000e+00 -8.14163551e-16  5.18104078e-16]<br>
[1. 1. 1.]<br>
<img src="https://www.sssdoctor.com/post-images/1646632521860.png" alt="" loading="lazy"></p>
<p>3.2范围缩放<br>
3.2.1将样本矩阵中的每一列最小最大值设为相同的区间，统一各列特征值的范围。一般情况下会把特征值缩放到【0，1】<br>
3.2.2<br>
每个数减去数组中的最小数 结果再除以上一步结果中的最大值<br>
3.2.3<br>
<img src="https://www.sssdoctor.com/post-images/1646630918053.png" alt="" loading="lazy"><br>
import numpy as np<br>
import sklearn.preprocessing as sp</p>
<p>raw_samples=np.array([<br>
[17,90,4000],<br>
[20,80,5000],<br>
[23,75,5500]])<br>
mms=sp.MinMaxScaler(feature_range=(0,1))#MinMaxScaler范围缩放命令（+参数指定）<br>
result=mms.fit_transform(raw_samples)<br>
print(result)<br>
输出结果为：<br>
[[0.         1.         0.        ]<br>
[0.5        0.33333333 0.66666667]<br>
[1.         0.         1.        ]]<br>
<img src="https://www.sssdoctor.com/post-images/1646632838188.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646632844467.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ICEM CFD六面体网格划分-01]]></title>
        <id>https://www.sssdoctor.com/post/icem-cfd-liu-mian-ti-wang-ge-hua-fen/</id>
        <link href="https://www.sssdoctor.com/post/icem-cfd-liu-mian-ti-wang-ge-hua-fen/">
        </link>
        <updated>2022-02-24T01:43:33.000Z</updated>
        <summary type="html"><![CDATA[<p>1.Block基本概念<br>
2.Bolock层次结构<br>
点、线、面、块<br>
3.Block创建(creat)以及分割（split)<br>
3.1自上而下<br>
即先对几何体切块，然后细分，最终实现精细化控制。自上而下实际上是一种拓扑意义上的顺序。常见类型包括：3D、2DSurface、2DPlan</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.Block基本概念<br>
2.Bolock层次结构<br>
点、线、面、块<br>
3.Block创建(creat)以及分割（split)<br>
3.1自上而下<br>
即先对几何体切块，然后细分，最终实现精细化控制。自上而下实际上是一种拓扑意义上的顺序。常见类型包括：3D、2DSurface、2DPlan</p>
<!-- more -->
<p><img src="https://www.sssdoctor.com/post-images/1646649258121.png" alt="" loading="lazy"><br>
3.2自下而上<br>
先建立块的面，然后拉伸块，让块的贴近于几何结构。面块生成以后，自下而上生成块的四个命令才能急活.<br>
总结：关于3d块的关联务必是重点关注的地方，不然软件默认的关联方式会给你带来极大的麻烦。2022.3.08日关于弹簧的网格划分 耗时四五个小时。总结到的最重要的经验就是关联的严谨性<br>
<img src="https://www.sssdoctor.com/post-images/1646649431777.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723099367.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723103787.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723111014.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723146090.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723155739.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723159756.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723164017.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723168034.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723172660.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646723176213.png" alt="" loading="lazy"><br>
3.3普通分割<br>
包括线分割以及点分割，其余切割方式还未接触过。<br>
<img src="https://www.sssdoctor.com/post-images/1646649815800.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646649885776.png" alt="" loading="lazy"><br>
3.4 O型切分的骚操作<br>
适用于圆弧形、比如：圆形、圆柱、球等。O型切分的实质是为映射的实现，提供几何基础，提升映射结构网格的质量。<br>
选择块、面(2d不激活）、边（与边相关的block/face都会被选中，因此L/C切分虽然选择了边，实际上选择了被删除的块）、点。可实现全O型网格、L型、C型网格切分，以及O型外网格切分便于快速创建边界层。<br>
<img src="https://www.sssdoctor.com/post-images/1646652584235.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646653383957.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646653391132.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646653398724.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646653407040.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646653420117.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646653427942.png" alt="" loading="lazy"><br>
3.5Y型切分<br>
3.5.1平面Y型切分<br>
平面三角形的Y切分实际上是四边形的Y切分，因为生成的块是四边形，具体也可参考上部分内容<br>
<img src="https://www.sssdoctor.com/post-images/1646660247248.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646660250473.png" alt="" loading="lazy"><br>
3.5.2 3DY型切分<br>
具体过程：<br>
1.生成块<br>
2.利用合并顶点操作，注意此处要把program去掉勾选（平面三角形不可以用合并点的操作，是因为合并顶点之后块变成三角形，三棱柱则不会，因为还存在四边形）<br>
3.关联边，使得块映射网格能够反映到几何体上<br>
4.移动点，选定相应的约束<br>
5.选择edit block<br>
6.找到对应切面进行Y切分<br>
<img src="https://www.sssdoctor.com/post-images/1646661672859.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646661677674.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646661686488.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646661692169.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646661697459.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1646661702753.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ICEM CFD几何拓扑、修复]]></title>
        <id>https://www.sssdoctor.com/post/icem-cfd-ji-he-tuo-bu-xiu-fu/</id>
        <link href="https://www.sssdoctor.com/post/icem-cfd-ji-he-tuo-bu-xiu-fu/">
        </link>
        <updated>2022-02-23T07:30:04.000Z</updated>
        <summary type="html"><![CDATA[<p>geometry操作界面<br>
从左至右：创建点、线、面、体、网格面、几何修复、几何变换、恢复主导对象、删除点、删除线、删除面、删除body、删除任意对象</p>
]]></summary>
        <content type="html"><![CDATA[<p>geometry操作界面<br>
从左至右：创建点、线、面、体、网格面、几何修复、几何变换、恢复主导对象、删除点、删除线、删除面、删除body、删除任意对象</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://www.sssdoctor.com/post-images/1645607081296.png" alt="" loading="lazy"></figure>
<p>1.geometry-point创建点的方式总体来说由10种 1.1-1.3为创建点常用方式1.4-1.10属于辅助创建</p>
<p>1.1直接创建：点击图中区域创建 对应1<br>
1.2选定点的方式创建：给定点的坐标、或者创建函数、对应2<br>
1.3偏移创建：根据已知某点坐标，给定偏移距离 对应3<br>
1.4利用三个点创建三点共圆的圆心点 对应4<br>
1.5利用已知两点的位置，给定距离第一点的距离比例，来确定新创建的点在直线上的位置（已知两点确   定一条直线） 对应图5<br>
1.6已知某一直线，创建其起点及终点 对应6<br>
1.7线交点 对应7<br>
1.8 图中5的变形 原理一致 对应8<br>
1.9点在线上的投影来创建对应点 对应9<br>
1.10点在面上的投影来创建对应点 对应10<br>
<img src="https://www.sssdoctor.com/post-images/1645604458011.png" alt="" loading="lazy"></p>
<p>2.geometry-line 创建线的方式共有12种</p>
<p>2.1由点成线、两点呈直线、多点成曲线  对应1<br>
2.2创建圆弧 三点共弧或者呀 圆心及两点共弧 对应2<br>
2.3创建圆 对应3<br>
2.4等值线 对应4<br>
2.5面交线 对应5<br>
2.6创建某一曲线在另一面上的投影线 对应6<br>
2.7分割线将一线分割共有五种方式：点、曲线线、面、连接线、角度 对应7<br>
2.8合并线 对应7的反操作<br>
2.8给定某一曲面上的边界线、类似于点操作种给定一直线给出起始点 对应8<br>
2.9修改曲线 对应9<br>
2.10创建中间线、类似于点操作种 给定两点的位置 创建中间点 对应10<br>
2.11截面线<br>
<img src="https://www.sssdoctor.com/post-images/1645604240348.png" alt="" loading="lazy"></p>
<p>3.geometry-surface</p>
<p>3.1四点成面注意顺序逆时针或者顺时针、线成面、对应1<br>
3.2类似于扫描 需要由扫描面以及引导线 对应2<br>
3.3与3.2功能一致、对应3<br>
3.4旋转 对应4<br>
3.5放样面 对应5<br>
3.6面投影 对应6<br>
3.7两面之间取中面 对应7<br>
3.8 分割面 对应8<br>
3.9 合并面 对应9<br>
3.10 还原分割面 对应10<br>
3.11线到面的投影过程成面 对应11<br>
3.12延申面 对应12<br>
3.13几何简化 对应13<br>
3.14标准几何 对应14<br>
<img src="https://www.sssdoctor.com/post-images/1645604690436.png" alt="" loading="lazy"></p>
<p>4.Body创建主要为了计算域、主要用于非结构网格</p>
<p>5.几何修补<br>
其余软件导入到ICEM中时为确保导入模型在两软件交接过程中数据的缺失及几何结构的损坏，所以要进行几何修复、这里面包括，拓扑创建、几何检测、封闭孔动、去除孔洞、分割面、调整厚度、修改面法向、螺为空检测、突起检测、倒角检测等。<br>
<img src="https://www.sssdoctor.com/post-images/1645607481902.png" alt="" loading="lazy"></p>
<p>6.创建Part<br>
此处的目的在于明确计算域，确定计算域具体几何参数同时消除不必要的几何特征等、</p>
<p>attention：<br>
icem这个软件本身存在很多 bug 而且也需要极度细心才能操作顺利 所以很容易出问题 要保持足够的耐心</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[流体网格]]></title>
        <id>https://www.sssdoctor.com/post/liu-ti-wang-ge/</id>
        <link href="https://www.sssdoctor.com/post/liu-ti-wang-ge/">
        </link>
        <updated>2022-02-22T07:41:55.000Z</updated>
        <summary type="html"><![CDATA[<p>1.流体网格基础概念<br>
1.1术语<br>
网格：grid/cell/mesh<br>
节点：node(固体常用/vertices流体计算软件常用）<br>
控制体：control volume</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.流体网格基础概念<br>
1.1术语<br>
网格：grid/cell/mesh<br>
节点：node(固体常用/vertices流体计算软件常用）<br>
控制体：control volume</p>
<!-- more -->
<p>1.2网格形状<br>
1.2.1 2D<br>
三角形、四边形<br>
<img src="https://www.sssdoctor.com/post-images/1645516312010.png" alt="" loading="lazy"><br>
1.2.2 3D<br>
四面体、六面体<br>
<img src="https://www.sssdoctor.com/post-images/1645516326375.png" alt="" loading="lazy"><br>
棱柱、金字塔、多面体（目前ANSYS前处理软件不能生成，但是FLUENT可将四面体或者金字塔转换成多面体、目前能生成多面体网格的前处理软件包括STAR-CCM+/CFD-GEOM。转化为多面体网格后能够大幅度减少网格数量。<br>
<img src="https://www.sssdoctor.com/post-images/1645516353074.png" alt="" loading="lazy"></p>
<p>1.3结构网格域非结构网格<br>
可以粗略的认为四边形及六面体网格属于结构网格、其余属非结构网格，需要注意的是这种定义并不严谨。（跟拓扑相关，后面来加深理解）<br>
1.4网格数量<br>
节点+面或者体<br>
1.5网格质量<br>
决定计算精度</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DM进行流体域的创建]]></title>
        <id>https://www.sssdoctor.com/post/dm-jin-xing-liu-ti-yu-de-chuang-jian/</id>
        <link href="https://www.sssdoctor.com/post/dm-jin-xing-liu-ti-yu-de-chuang-jian/">
        </link>
        <updated>2022-02-22T06:03:54.000Z</updated>
        <summary type="html"><![CDATA[<p>直接计算流体域创建、内流计算流体域创建、外流计算创建 混合流体域的创建</p>
]]></summary>
        <content type="html"><![CDATA[<p>直接计算流体域创建、内流计算流体域创建、外流计算创建 混合流体域的创建</p>
<!-- more -->
<p>1.计算域创建<br>
即将流体域的几何模型直接画出<br>
<img src="https://www.sssdoctor.com/post-images/1645513042982.png" alt="" loading="lazy"><br>
2.内流计算流体域的创建<br>
Tool--fill---cavity/caps(不封闭、封闭)--twist ?(画弹簧可用)--通过几何模型将流体域抽离出来，内流场即在几何体内部流动，比如管道流等<br>
<img src="https://www.sssdoctor.com/post-images/1645513396197.png" alt="" loading="lazy"><br>
3.外流体域创建<br>
Tool--enclossure(外壳命令)—box/cylinder/sphere<br>
外流畅创建几何体外流场，比如导弹、飞机的外流场等、<br>
<img src="https://www.sssdoctor.com/post-images/1645513029802.png" alt="" loading="lazy"><br>
4.混合流体域的创建<br>
方法一利用布尔运算 画出外流场模型然后利用SUB操作去除原有几何体，进而实现内流场及外流场几何模型创建。<br>
<img src="https://www.sssdoctor.com/post-images/1645515392642.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1645515397947.png" alt="" loading="lazy"><br>
方法二：利用enclosure操作，首先建立包围几何体的流场，此处关节点在于选择冻结，不然新建后会使得新旧几何体合并，然后利用enclosure操作，选择用户自定义的模型（后面建立的这个） 然后选择选定几何体 选择原来的几何 从而实现流体域的划分，而且不会删除原有几何体，布尔操作会！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[N-S方程推导]]></title>
        <id>https://www.sssdoctor.com/post/n-s-fang-cheng-tui-dao-ji-qi-wu-li-yi-yi/</id>
        <link href="https://www.sssdoctor.com/post/n-s-fang-cheng-tui-dao-ji-qi-wu-li-yi-yi/">
        </link>
        <updated>2022-02-18T01:28:18.000Z</updated>
        <summary type="html"><![CDATA[<p>这并不是我第一次接触N-S方程，认识它的时间竟然比我女友的时间还要提前，那是2018年的夏天。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这并不是我第一次接触N-S方程，认识它的时间竟然比我女友的时间还要提前，那是2018年的夏天。</p>
<!-- more -->
<p>可是每次推每次都忘，虽说遗忘不可避免，但也不至于每次都从头开始，劳资决定这次把它干挺！这次要搞懂一下几个问题：1.N-S方程的推导过程及各项的物理意义。2.有限体积法的基本原理。3.代数方程求解过程。<br>
<img src="https://www.sssdoctor.com/post-images/1645148308307.jfif" alt="" loading="lazy"><br>
1.背景介绍<br>
1.1定义<br>
计算流体力学【简称：CFD(Computational Fluid Dynamics)】，利用计算机，通过数值计算的方法，求解流体控制方程，最终得到流场的离散数值解。<br>
1.2优劣<br>
研究流体力学的方法主要分为三种：理论、试验、数值计算。<br>
2.方程推导<br>
2.1连续介质假设<br>
流体连续、充满整个空间不存在间断，才能保证各种物理量的连续性、模型的有效性、函数才能生效<br>
ps:稀薄气体不属于连续介质假设<br>
2.2随体导数<br>
随体导数实际上是联系欧拉法与拉格朗日法的桥梁，比如从早上从北京出发去上海，中午到的一动车，监测车体室外温度，会发现温度的变化分为两个部分，第一部分由于空间位置发生改变引起的温度变化，第二部分是从早上到晚上时间变化引起的温度变化。<br>
因此随体导数：<img src="https://www.sssdoctor.com/post-images/1645422967597.png" alt="" loading="lazy"><br>
式中：右1表示当地项、右2表示对流项<br>
2.3物质运动描述方法：<br>
2.3.1欧拉法<br>
控制体 对于流体大多数基于控制体 为什么流体基于控制体 其实也可以基于系统（粒子） 但是工程应用更多的是关注于场的概念，某一区域内的整体的变化，关注的程度大于某一粒子的重要性，当然这也不是绝对的。<br>
用一生活中的例子来描述欧拉法就是摄像头，一般来讲摄像头位置固定，在摄像头的位置区域内，可以观测该点时间内的变化。<br>
2.3.2拉格朗日坐法<br>
系统  一群粒子的跟踪 实质上追踪的是流体微元及质点<br>
警察跟踪就是典型的拉格朗日<br>
2.4方程推导<br>
守恒关系：质量守恒dm/dt=0 动量定理f=d(mv)/dt 能量守恒  d(e)/dt=w-q<br>
如何建立以上关系？<br>
2.4.1方法一：雷诺输运定理*（二次开发及写方程）<br>
首先建立一个物质密度的概念：比如<br>
<img src="https://www.sssdoctor.com/post-images/1645423254081.png" alt="" loading="lazy"><br>
基于物质密度这个概念去推导欧拉及拉格朗日之间的转换关系<br>
对于空间位置固定的控制体而言：遵循以下规律<br>
总系统的能量变化-控制体内部的能量化=净流出量<br>
<img src="https://www.sssdoctor.com/post-images/1645424187096.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1645424620211.png" alt="" loading="lazy"><br>
以质量方程为例假设有限控制体空间位置固定且趋近于无穷小，则有下式：<br>
<img src="https://www.sssdoctor.com/post-images/1645425390660.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1645425408675.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1645425416452.png" alt="" loading="lazy"><br>
因此守恒型积分质量方程如上图所示<br>
将物质密度替换为动量密度、能量密度、便可以推出守恒型积分动量方程、能量方程、<br>
具体过程如下：<br>
<img src="https://www.sssdoctor.com/post-images/1645426039597.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1645426413313.png" alt="" loading="lazy"><br>
其实四种方程之间可相互转换<br>
2.4.2方法二：<br>
<img src="https://www.sssdoctor.com/post-images/1645427527701.png" alt="" loading="lazy"><br>
<img src="https://www.sssdoctor.com/post-images/1645427956288.png" alt="" loading="lazy"><br>
CFD使用守恒型微分方程<br>
守恒：欧拉<br>
微分：流场内任一点的物理量<br>
2.4.2方法二：李新亮的推导<br>
2.4.3方程的封闭性<br>
未知数：m (u v w) T P方程得得个数有6个未知数     但是只有5方程  所以需要有补充翻方程 即状态方程 因此方程可简化<br>
2.4.4粘性<br>
可压缩 粘性是温度的函数<br>
不可压缩： 粘性是常数<br>
2.5计算流体力学常用方程<br>
2.5.1不可压方程<br>
2.5.2无粘方程（欧拉）<br>
2.5.3thin layer n-s(薄膜方程) 交叉导数项拿掉<br>
2.5.4DNS:直接数值模拟：拿N-S方程来计算<br>
2.5.5雷诺平均方程 由DNS演化而来加上了人工粘性项<br>
2.5.6PNS方程 将N-S方程抛物化<br>
2.5.7边界层方程<br>
2.5.8扰动、小扰动、线化N-S流动方程</p>
]]></content>
    </entry>
</feed>